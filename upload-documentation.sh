#!/usr/bin/env -S bash -e

PROJECT=$1
RELEASE_VERSION=$2
VERSION_FAMILY=$3
WORKSPACE=${WORKSPACE:-'.'}

if [ -z "$PROJECT" ]; then
	echo "ERROR: Project not supplied"
	exit 1
fi
if [ -z "$RELEASE_VERSION" ]; then
	echo "ERROR: Release version argument not supplied"
	exit 1
fi
if [ -z "$VERSION_FAMILY" ]; then
	echo "ERROR: Version family argument not supplied"
	exit 1
fi

pushd ${WORKSPACE}

DIST=distribution/target/dist/hibernate-$PROJECT-$RELEASE_VERSION-dist.zip
if [ ! -f $DIST ]; then
	# Legacy layout; see upload-distribution.sh
	DIST=distribution/target/hibernate-$PROJECT-$RELEASE_VERSION-dist.zip
fi
unzip $DIST -d distribution/target/unpacked
DOCUMENTATION_DIRECTORY=distribution/target/unpacked/hibernate-${PROJECT}-${RELEASE_VERSION}/docs

# Add various metadata to the header

if [ "$PROJECT" == "validator" ]; then
	META_DESCRIPTION="Hibernate Validator, Annotation based constraints for your domain model - Reference Documentation"
	META_KEYWORDS="hibernate, validator, hibernate validator, validation, bean validation"
	PROJECT_MESSAGE_PREFIX='[HV] '
elif [ "$PROJECT" == "ogm" ]; then
	META_DESCRIPTION="Hibernate OGM, JPA for NoSQL datastores - Reference Documentation"
	META_KEYWORDS="hibernate, ogm, hibernate ogm, nosql, jpa, infinispan, mongodb, neo4j, cassandra, couchdb, ehcache, redis"
	PROJECT_MESSAGE_PREFIX='[OGM] '
elif [ "$PROJECT" == "search" ]; then
	META_DESCRIPTION="Hibernate Search, full text search for your entities - Reference Documentation"
	META_KEYWORDS="hibernate, search, hibernate search, full text, lucene, elasticsearch"
	PROJECT_MESSAGE_PREFIX='[HSEARCH] '
else
	META_DESCRIPTION=""
	META_KEYWORDS=""
	PROJECT_MESSAGE_PREFIX=''
fi

for file in $(find ${DOCUMENTATION_DIRECTORY}/reference/ -name \*.html); do
	# Only add the information if the file is generated by Docbook (the Asciidoctor output already has these information)
	if grep -q '<meta name="generator" content="DocBook ' ${file}; then
		# Add the metadata to the header
		sed -i 's@</title><link rel="stylesheet"@</title><!-- HibernateDoc.Meta --><meta name="description" content="'"$META_DESCRIPTION"'" /><meta name="keywords" content="'"$META_KEYWORDS"'" /><meta name="viewport" content="width=device-width, initial-scale=1.0" /><link rel="canonical" href="https://docs.jboss.org/hibernate/stable/'"$PROJECT"'/reference/en-US/html_single/" /><!-- /HibernateDoc.Meta --><link rel="stylesheet"@' ${file}

		# Add the outdated content Javascript at the bottom of the pages
		sed -i 's@</body>@<!-- HibernateDoc.OutdatedContent --><script src="//code.jquery.com/jquery-3.1.0.min.js" integrity="sha256-cCueBR6CsyA4/9szpPfrX3s49M9vUU5BgtiJj06wt/s=" crossorigin="anonymous"></script><script src="/hibernate/_outdated-content/outdated-content.js" type="text/javascript"></script><script type="text/javascript">var jQuery_3_1 = $.noConflict(true); jQuery_3_1(document).ready(function() { HibernateDoc.OutdatedContent.install("'"$PROJECT"'"); });</script><!-- /HibernateDoc.OutdatedContent --></body>@' ${file}
	fi
done

# Push the documentation to the doc server
# Note we have to use filemgmt-prod-sync.jboss.org for rsync, not filemgmt.jboss.org or filemgmt-prod.jboss.org
rsync -rzh --progress --delete ${DOCUMENTATION_DIRECTORY}/ filemgmt-prod-sync.jboss.org:/docs_htdocs/hibernate/${PROJECT}/$VERSION_FAMILY

# If the release is the new stable one, we need to update the doc server (outdated content descriptor and /stable/ symlink)

function version_gt() {
	test "$(echo "$@" | tr " " "\n" | sort -V | head -n 1)" != "$1";
}

if [[ $RELEASE_VERSION =~ .*\.Final ]]; then
	wget -q http://docs.jboss.org/hibernate/_outdated-content/${PROJECT}.json -O ${PROJECT}.json
	if [ ! -s ${PROJECT}.json ]; then
		echo "Error downloading the ${PROJECT}.json descriptor. Exiting."
		exit 1
	fi
	CURRENT_STABLE_VERSION=$(cat ${PROJECT}.json | jq -r ".stable")

	if [ "$CURRENT_STABLE_VERSION" != "$VERSION_FAMILY" ] && version_gt $VERSION_FAMILY $CURRENT_STABLE_VERSION; then
		cat ${PROJECT}.json | jq ".stable = \"$VERSION_FAMILY\"" > ${PROJECT}-updated.json
		if [ ! -s ${PROJECT}-updated.json ]; then
			echo "Error updating the ${PROJECT}.json descriptor. Exiting."
			exit 1
		fi

		# filemgmt-prod*.jboss.org don't allow scp, so we'll just rsync a single file...
		# That's a bit overkill but at least it works.
		# Note we have to use filemgmt-prod-sync.jboss.org for rsync, not filemgmt.jboss.org or filemgmt-prod.jboss.org
		rsync -z --progress ${PROJECT}-updated.json filemgmt-prod-sync.jboss.org:/docs_htdocs/hibernate/_outdated-content/${PROJECT}.json
		rm -f ${PROJECT}-updated.json

		# update the symlink of stable to the latest release
		# don't indent the EOF!
		sftp filemgmt-prod.jboss.org -b <<EOF
cd docs_htdocs/hibernate/stable
rm ${PROJECT}
ln -s ../${PROJECT}/$VERSION_FAMILY ${PROJECT}
EOF
	fi
	rm -f ${PROJECT}.json
fi

# =============================================================================
# Push the docs to the github repo:
trap "rm -rf '${DOCS_HIBERNATE_ORG_TARGET_DIR}'" EXIT
# How many times should we try to push-wait-pull-retry before we quit:
MAX_ATTEMPTS=5
# Delay between attempts in seconds:
DELAY_BETWEEN_TRIES=5

DOCS_PUSHED=1

for (( i=1; i<=$MAX_ATTEMPTS; i++ ))
do
  echo "Attempt $i of $MAX_ATTEMPTS: Pushing changes..."

  DOCS_HIBERNATE_ORG_TARGET_DIR=$(mktemp -d --tmpdir 'docs-hibernate-org-XXXXXXXXXX')
  DOCUMENTATION_DIRECTORY=$(realpath $DOCUMENTATION_DIRECTORY)
  pushd ${DOCS_HIBERNATE_ORG_TARGET_DIR}
  echo "Hibernate docs repository location: $DOCS_HIBERNATE_ORG_TARGET_DIR"

  # Use a sparse checkout because the working dir can be huge (more than 6 GB)
  # while .git data is relatively small (about 300 MB)
  git clone --sparse --depth 1 git@github.com:hibernate/docs.hibernate.org.git .
  CURRENT_DOCS_GIT_LOCATION=${PROJECT}/${VERSION_FAMILY}
  git sparse-checkout set "stable" "${CURRENT_DOCS_GIT_LOCATION}" "_outdated-content"

  # Set up commit info
  git config user.email ci@hibernate.org
  git config user.name Hibernate-CI

  # Copy documentation to the git repo for docs.hibernate.org
  # rsync fails if the target is not there??? (can happen when the new series is added), let's just be safe and create the "missing" target:
  mkdir -p "${CURRENT_DOCS_GIT_LOCATION}"
  rsync -av \
  	--delete \
  	"${DOCUMENTATION_DIRECTORY}/" "${CURRENT_DOCS_GIT_LOCATION}"

  if [[ $RELEASE_VERSION =~ .*\.Final ]]; then
    CURRENT_STABLE_VERSION=$(cat _outdated-content/${PROJECT}.json | jq -r ".stable")
    if [ "$CURRENT_STABLE_VERSION" != "$VERSION_FAMILY" ] && version_gt $VERSION_FAMILY $CURRENT_STABLE_VERSION; then
      jq ".stable = \"${VERSION_FAMILY}\"" _outdated-content/${PROJECT}.json > temp.json && mv temp.json _outdated-content/${PROJECT}.json
      # update the symlink of stable to the latest release
      pushd stable
      rm ${PROJECT}
      ln -s ../${PROJECT}/$VERSION_FAMILY ${PROJECT}
      popd
    fi
  fi

  git add -A .
  git commit -m "${PROJECT_MESSAGE_PREFIX}Documentation for ${RELEASE_VERSION}"
  git push origin HEAD:main

  if [ $? -eq 0 ]; then
    echo "Git push successful!"
    DOCS_PUSHED=0
    break
  fi

  if [ $i -lt $MAX_ATTEMPTS ]; then
    echo "Push failed. Waiting for $DELAY_BETWEEN_TRIES seconds before trying again..."
    sleep $DELAY_BETWEEN_TRIES

    echo "Clearing out the docs repository dir before recloning..."
    popd
    rm -rf "$DOCS_HIBERNATE_ORG_TARGET_DIR"
  fi
done

popd

popd

if [ $DOCS_PUSHED -eq 0 ]; then
  echo "Successfully pushed the docs."
else
  echo "Failed to push the docs!!!"
  exit 1
fi
